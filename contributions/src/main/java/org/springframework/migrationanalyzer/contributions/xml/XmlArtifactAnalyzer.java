/* * Copyright 2010 the original author or authors. * * Licensed under the Apache License, Version 2.0 (the "License"); * you may not use this file except in compliance with the License. * You may obtain a copy of the License at * * http://www.apache.org/licenses/LICENSE-2.0 * * Unless required by applicable law or agreed to in writing, software * distributed under the License is distributed on an "AS IS" BASIS, * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. * See the License for the specific language governing permissions and * limitations under the License. */package org.springframework.migrationanalyzer.contributions.xml;import org.springframework.migrationanalyzer.analyze.support.AnalysisFailedException;import org.w3c.dom.Node;/** * An analyzer for XML files * <p /> *  * <strong>Concurrent Semantics</strong><br /> *  * Implementations must be thread-safe */public interface XmlArtifactAnalyzer {    /**     * Analyze the values found in this XmlArtifactAnalyzer's Document that match the supplied XPath expression using     * the supplied analyzer     *      * @param expression The XPath expression     * @param analyzer The analyzer     * @throws AnalysisFailedException if a failure occurs during analysis     */    void analyzeValues(String expression, ValueAnalyzer analyzer) throws AnalysisFailedException;    /**     * Analyze the values beneath the suppled Node that match the supplied XPath expression using the supplied analyzer     *      * @param expression The XPath expression     * @param analyzer The analyzer     * @throws AnalysisFailedException if a failure occurs during analysis     */    void analyzeValues(Node node, String expression, ValueAnalyzer analyzer) throws AnalysisFailedException;    /**     * Analyze the Nodes found in this XmlArtifactAnalyzer's Document that match the supplied XPath expression using the     * supplied analyzer     *      * @param expression The XPath expression     * @param analyzer The analyzer     * @throws AnalysisFailedException if a failure occurs during analysis     */    void analyzeNodes(String expression, NodeAnalyzer analyzer) throws AnalysisFailedException;    /**     * Analyze the Nodes beneath the supplied Node that match the supplied XPath expression using the supplied analyzer     *      * @param expression The XPath expression     * @param analyzer The analyzer     * @throws AnalysisFailedException if a failure occurs during analysis     */    void analyzeNodes(Node node, String expression, NodeAnalyzer analyzer) throws AnalysisFailedException;}